{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","types/SearchParamsEnum.ts","types/Sex.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","types/searchEnum.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","SearchParams","Sex","PeopleFilters","setSearchParams","query","get","Query","sex","centuries","getAll","Centuries","Male","Female","type","placeholder","onChange","event","target","map","century","includes","filter","cent","length","Loader","Search","PeopleTable","people","slug","useParams","sort","order","findParent","parentName","find","person","name","handleSortSearch","handleArrowChange","field","Name","Born","Died","mother","motherName","father","fatherName","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","Sort","Order","useEffect","fetchData","fetchedPeople","sortedPeople","useMemo","preparedPeople","pers1","pers2","localeCompare","reverse","toLowerCase","trim","Math","ceil","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f194b2db.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getLinkClass}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SearchParams {\n  Query = 'query',\n  Sex = 'sex',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","export enum Sex {\n  Male = 'm',\n  Female = 'f',\n}\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchParams } from '../types/SearchParamsEnum';\nimport { Sex } from '../types/Sex';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(SearchParams.Query) || '';\n  const sex = searchParams.get(SearchParams.Sex) || '';\n  const centuries = searchParams.getAll(SearchParams.Centuries) || [];\n\n  const allCenturies = ['16', '17', '18', '19', '20'];\n\n  const handleQuerySearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(searchParams, {\n      query: event.target.value || null,\n    });\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: Sex.Male }}\n          className={classNames({ 'is-active': sex === Sex.Male })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: Sex.Female }}\n          className={classNames({ 'is-active': sex === Sex.Female })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQuerySearch}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              <SearchLink\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(cent => century !== cent)\n                    : [...centuries, century],\n                }}\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ sex: null, centuries: null, query: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum Search {\n  Name = 'name',\n  Sex = 'sex',\n  Died = 'died',\n  Born = 'born',\n}\n","import classNames from 'classnames';\nimport {\n  NavLink,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport { Person } from '../types';\nimport { Search } from '../types/searchEnum';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const findParent = (parentName: string | null) => {\n    return people.find(person => person.name === parentName) || null;\n  };\n\n  const handleSortSearch = (type: Search) => {\n    if (!sort || sort !== type) {\n      return { sort: type, order: null };\n    }\n\n    if (!order) {\n      return { sort: type, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  const handleArrowChange = (field: string) => {\n    return classNames('fa fa-sort', {\n      'fa-sort-up': sort === field && !order,\n      'fa-sort-down': sort === field && order,\n    });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={handleSortSearch(Search.Name)}\n              >\n                <span className=\"icon\">\n                  <i className={handleArrowChange(Search.Name)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={handleSortSearch(Search.Sex)}>\n                <span className=\"icon\">\n                  <i className={handleArrowChange(Search.Sex)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={handleSortSearch(Search.Born)}>\n                <span className=\"icon\">\n                  <i className={handleArrowChange(Search.Born)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={handleSortSearch(Search.Died)}>\n                <span className=\"icon\">\n                  <i className={handleArrowChange(Search.Died)} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const mother = findParent(person.motherName);\n          const father = findParent(person.fatherName);\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classNames({\n                'has-background-warning': slug === person.slug,\n              })}\n            >\n              <td>\n                <NavLink\n                  to={`/people/${person.slug}?${searchParams.toString()}`}\n                  className={classNames({\n                    'has-text-danger': person.sex === 'f',\n                  })}\n                >\n                  {person.name}\n                </NavLink>\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {mother ? (\n                  <NavLink\n                    to={`/people/${mother.slug}?${searchParams.toString()}`}\n                    className=\"has-text-danger\"\n                  >\n                    {person.motherName || '-'}\n                  </NavLink>\n                ) : (\n                  person.motherName || '-'\n                )}\n              </td>\n\n              <td>\n                {father ? (\n                  <NavLink to={`/people/${father.slug}?${searchParams.toString()}`}>\n                    {person.fatherName || '-'}\n                  </NavLink>\n                ) : (\n                  person.fatherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { Search } from '../types/searchEnum';\nimport { SearchParams } from '../types/SearchParamsEnum';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get(SearchParams.Query) || '';\n  const sex = searchParams.get(SearchParams.Sex) || '';\n  const centuries = searchParams.getAll(SearchParams.Centuries) || [];\n  const sort = searchParams.get(SearchParams.Sort) || '';\n  const order = searchParams.get(SearchParams.Order) || '';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const fetchedPeople = await getPeople();\n\n        setPeople(fetchedPeople);\n      } catch (error) {\n        setErrorMessage('Something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const sortedPeople = useMemo(() => {\n    let preparedPeople = people;\n\n    if (sort) {\n      preparedPeople = preparedPeople.sort((pers1, pers2) => {\n        switch (sort) {\n          case Search.Name:\n          case Search.Sex:\n            return pers1[sort].localeCompare(pers2[sort]);\n          case Search.Born:\n          case Search.Died:\n            return pers1[sort] - pers2[sort];\n          default: return 0;\n        }\n      });\n    }\n\n    if (order) {\n      preparedPeople.reverse();\n    }\n\n    if (sex) {\n      preparedPeople = [...preparedPeople].filter(person => person.sex === sex);\n    }\n\n    if (query) {\n      preparedPeople = [...preparedPeople].filter(\n        person => person.name.toLowerCase().includes(query.toLowerCase().trim())\n          || person.motherName?.toLowerCase().includes(\n            query.toLowerCase().trim(),\n          )\n          || person.fatherName?.toLowerCase().includes(\n            query.toLowerCase().trim(),\n          ),\n      );\n    }\n\n    if (centuries.length) {\n      preparedPeople = [...preparedPeople].filter(person => (\n        centuries.includes(Math.ceil(person.born / 100).toString())\n      ));\n    }\n\n    return preparedPeople;\n  }, [people, sort, order, sex, query, centuries]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\">{errorMessage}</p>\n              )}\n\n              {!people.length && !isLoading && !errorMessage && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {sortedPeople.length === 0 && !isLoading && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {sortedPeople.length > 0 && !isLoading && (\n                <PeopleTable people={sortedPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Routes>\n    <Route path=\"/\" element={<App />}>\n      <Route index element={<h1 className=\"title\">Home Page</h1>} />\n      <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"people\">\n        <Route index element={<PeoplePage />} />\n        <Route path=\":slug\" element={<PeoplePage />} />\n      </Route>\n      <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n    </Route>\n  </Routes>\n);\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Root />\n    </Router>,\n  );\n"],"sourceRoot":""}